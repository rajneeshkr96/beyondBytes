// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
  WRITER
}

model Blog {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  slug          String          @unique
  title         String
  image         Json
  content       String
  metaTitle     String
  metaDesc      String
  author        User            @relation(fields: [authorId], references: [id])
  authorId      String          @db.ObjectId
  likesCount    Int             @default(0)
  commentsCount Int             @default(0)
  viewsCount    Int             @default(0)
  comments      Comment[]
  likes         Like[]
  tags          String[]
  bookmarks     bookmarks[]
  notifications notifications[]
  readTime      String
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @map("updated_at")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  image         String?
  about         String?
  username      String?         @unique
  isSuspend     Boolean         @default(false)
  role          UserRole        @default(USER)
  followers     Follows[]       @relation("following")
  following     Follows[]       @relation("follower")
  Blogs         Blog[]
  comments      Comment[]
  likes         Like[]
  CommentLikes  commentLikes[]
  tags          Tags[]
  bookmarks     bookmarks[]
  notifications notifications[]
  createdAt     DateTime        @default(now()) @updatedAt @map("created_at")
  updatedAt     DateTime        @default(now()) @map("updated_at")
}

model Follows {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  follower User @relation("follower", fields: [followerId], references: [id])
  followerId String @db.ObjectId
  following User @relation("following", fields: [followingId], references: [id])
  followingId String @db.ObjectId

  @@unique([followerId, followingId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  Blog      Blog     @relation(fields: [BlogId], references: [id])
  CommentLikes commentLikes[]
  BlogId    String   @db.ObjectId
  likesCount Int     @default(0)
  User      User     @relation(fields: [UserId], references: [id])
  UserId    String   @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  Blog      Blog     @relation(fields: [BlogId], references: [id])
  like      Boolean  @default(true)
  BlogId    String   @db.ObjectId
  User      User     @relation(fields: [UserId], references: [id])
  UserId    String   @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
}
model commentLikes {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  CommentId String   @db.ObjectId
  Comment   Comment  @relation(fields: [CommentId], references: [id])
  User      User     @relation(fields: [UserId], references: [id])
  UserId    String   @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
}

model bookmarks {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bookmark  Boolean  @default(true)
  Blog      Blog     @relation(fields: [BlogId], references: [id])
  BlogId    String   @db.ObjectId
  User      User     @relation(fields: [UserId], references: [id])
  UserId    String   @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
}

model notifications {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  natification String[]
  Blog         Blog     @relation(fields: [BlogId], references: [id])
  BlogId       String   @db.ObjectId
  User         User     @relation(fields: [UserId], references: [id])
  UserId       String   @db.ObjectId
  createdAt    DateTime @default(now()) @map("created_at")
}

model Tags {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  value     String[]
  User      User     @relation(fields: [UserId], references: [id])
  UserId    String   @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
}
